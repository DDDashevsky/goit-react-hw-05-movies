{"version":3,"file":"static/js/779.4070487b.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","components/serviseAPI/fetchMoviesAPI.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { Grid } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Grid color=\"#102fdfdd\" height={100} width={100} wrapperClass=\"Loader\" />\n  );\n};\n","import styled from 'styled-components';\nexport const Container = styled.div``;\n\nexport const Text = styled.p``;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  list-style: none;\n  padding: 10px;\n  &:nth-child(2n + 1) {\n    background-color: lightgray;\n    border-radius: 10px;\n  }\n`;\n\nexport const Avatar = styled.img`\n  width: 40px;\n  height: 40px;\n`;\n\nexport const Name = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const ProfileContainer = styled.div`\n  display: flex;\n  gap: 30px;\n`;\nexport const NoResult = styled.div`\n  width: 100%;\n  background-color: lightgray;\n  border-radius: 10px;\n  font-size: 18px;\n  font-weight: 500;\n  text-align: center;\n  padding: 30px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Container,\n  Text,\n  List,\n  Item,\n  Avatar,\n  Name,\n  ProfileContainer,\n  NoResult,\n} from './Reviews.styled';\nimport { nanoid } from 'nanoid';\nimport { fetchMovieReviews } from 'components/serviseAPI/fetchMoviesAPI';\n\nconst ReviewsSection = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const fetchReviews = async () => {\n      const results = await fetchMovieReviews(id, {\n        signal: abortController.signal,\n      });\n      if (results) setReviews(results);\n      setStatus('loaded');\n    };\n\n    fetchReviews();\n  }, [id]);\n\n  return (\n    <Container>\n      {status === 'idle' && <Loader />}\n      {reviews !== null && (\n        <List>\n          {reviews.length === 0 && <NoResult>Sorry, no result</NoResult>}\n          {reviews.map(el => (\n            <Item key={nanoid()}>\n              <ProfileContainer>\n                <Avatar src=\"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\" />\n                <Name>{el.author}</Name>\n              </ProfileContainer>\n              <Text>{el.content}</Text>\n            </Item>\n          ))}\n        </List>\n      )}\n    </Container>\n  );\n};\n\nexport default ReviewsSection;\n","import axios from 'axios';\nconst KEY = 'f5b8fda00d2f47b0eff33be89e14dda0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async (page, abortController) => {\n  try {\n    const response = await axios.get(\n      `trending/movie/day?api_key=${KEY}&page=${page}`,\n      abortController\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMoviesByKeyword = async (query, page, abortSettings) => {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`,\n      abortSettings\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetailsInfo = async (movieId, abortSettings) => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${KEY}&language=en-US`,\n      abortSettings\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieActorDetails = async (movieId, abortSettings) => {\n  try {\n    const response = await axios.get(\n      `\nmovie/${movieId}/credits?api_key=${KEY}&language=en-US`,\n      abortSettings\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async (movieId, abortController) => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`,\n      abortController\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Loader","color","height","width","wrapperClass","Container","styled","Text","List","Item","Avatar","Name","ProfileContainer","NoResult","id","useParams","useState","reviews","setReviews","status","setStatus","useEffect","abortController","AbortController","fetchReviews","fetchMovieReviews","signal","results","length","map","el","src","author","content","nanoid","KEY","axios","fetchTrendingMovies","page","response","data","console","log","fetchMoviesByKeyword","query","abortSettings","fetchMovieDetailsInfo","movieId","fetchMovieActorDetails","cast","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}